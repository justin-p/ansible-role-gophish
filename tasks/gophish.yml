---
- name: Check if we already downloaded the zip.
  stat:
    path: "{{ gophish_download_destination }}"
  register: zip

- name: "Downloading gophish-v{{ gophish_version }}-{{ gophish_platform }}-{{ gophish_arch }}.zip."
  get_url:
    validate_certs: True
    url: "{{ gophish_url }}"
    checksum: "{{ gophish_sha256 }}"
    dest: "{{ gophish_download_destination }}"
    mode: 0640
    owner: "{{ gophish_user }}"
    group: "{{ gophish_user }}"
  when: not zip.stat.exists

- name: Unzip gophish-v{{ gophish_version }}-{{ gophish_platform }}-{{ gophish_arch }}.zip.
  unarchive:
    src: "{{ gophish_download_destination }}"
    dest: "{{ gophish_install_destination }}"
    remote_src: yes
    owner: "{{ gophish_user }}"
    group: "{{ gophish_user }}"
    mode: 0740
  when: not zip.stat.exists

- name: Ensure files of folders Gophish have the right ownership
  file:
    path: "{{ gophish_install_destination }}"
    owner: "{{ gophish_user }}"
    group: "{{ gophish_user }}"
    recurse: True

- name: Ensure gophish binary has the correct permissions.
  file:
    path: "{{ gophish_binary }}"
    mode: 0740

- name: Ensure gophish binary is allowed to bind to privileged ports using setcap
  capabilities:
    path: "{{ gophish_binary }}"
    capability: "{{ gophish_binary_capability }}"
    state: present
  tags: molecule-idempotence-notest

- name: Copy TLS key pair (private)
  copy:
    src: "{{ gophish_tls_private_key_path }}"
    dest: "{{ gophish_install_destination }}/gophish.pem"
    owner: "{{ gophish_user }}"
    group: "{{ gophish_user }}"
    mode: 0640
  when: gophish_tls_private_key_path

- name: Copy TLS key pair (private)
  copy:
    src: "{{ gophish_tls_public_key_path }}"
    dest: "{{ gophish_install_destination }}/gophish.crt"
    owner: "{{ gophish_user }}"
    group: "{{ gophish_user }}"
    mode: 0640
  when: gophish_tls_public_key_path

- name: Copy config.json file.
  template:
    src: "{{ gophish_config_template_source }}"
    dest: "{{ gophish_config_template_destination }}"
    owner: "{{ gophish_user }}"
    group: "{{ gophish_user }}"
    mode: 0740
  notify:
    - Reload gophish.

- name: Ensure gophish service file is properly set
  template:
    src: "{{ gophish_service_template_source }}"
    dest: "{{ gophish_service_template_destination }}"
    owner: "{{ gophish_user }}"
    group: "{{ gophish_user }}"
    mode: 0640
  notify:
    - Reload systemd.

- name: Run all notified handlers
  meta: flush_handlers

- name: Ensure gophish is properly started
  service:
    name: "{{ gophish_service }}"
    state: started
    enabled: yes

- name: If SELinux, fix issue with rights for gophish
  shell:
    cmd: |
      ausearch -c '(gophish)' --raw | audit2allow -M my-gophish |
      semodule -i my-gophish.pp
  when: ansible_selinux.status == 'enabled'

- name: Start gophish after fix
  service:
    name: "{{ gophish_service }}"
    state: started
    enabled: yes
  when: ansible_selinux.status == 'enabled'

- name: Get contents of gophish log file and find the temporary admin password # noqa 306
  shell:
    cmd: |
      cat {{ gophish_service_log_directory }}/gophish*.log |
      grep 'Please login with the username admin' |
      tail -1 |
      cut -d = -f 4 |
      tr -d \"
  retries: 10
  delay: 6
  changed_when: False
  ignore_errors: yes
  register: gophish_log
  until: gophish_log.stdout | length > 0

- name: "{{ gophish_log.stdout }}. You will be prompted to change this temporary password."
  debug:
    msg: "{{ gophish_log.stdout }}"
